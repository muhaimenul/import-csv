name: Laravel CI & CD

on:
  push:
    branches: [ master, staging, action ]
  pull_request:
    branches: [ master, staging, action ]

jobs:
  tests:
    name: Install dependencies and Run tests

    runs-on: ubuntu-latest
    
    # services:
    #   mysql:
    #     image: mysql:5.7
    #     env:
    #       MYSQL_ALLOW_EMPTY_PASSWORD: yes
    #       MYSQL_DATABASE: laravel
    #     ports:
    #       - 3306
    #     options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Setup PHP
      uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.0'
    - uses: actions/checkout@v3
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Composer Dependencies
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Install NPM Dependencies
      run: npm install
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
        # DB_PORT: ${{ job.services.mysql.ports[3306] }}
      run: vendor/bin/phpunit
    # - name: Execute tests (Unit and Feature tests) using JEST
    #   run: node_modules/.bin/jest



  build:
    name: Build JavaScript/CSS for Server

    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v2-beta
        with:
          node-version: "16"
          check-latest: true
      - name: Install NPM dependencies
        run: npm install
      - name: Compile assets for production
        run: npm run production



  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: [ tests, build]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.SSH_HOST }}
          REMOTE_USER: ${{ secrets.SSH_USERNAME }}
          TARGET: "/var/www/test/"
          # run: |
          #   cd /var/www/test/
          #   php -r "file_exists('.env') || copy('.env.example', '.env');"
          #   composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          #   php artisan key:generate
          #   chmod -R 777 storage bootstrap/cache
      - name: Deploy env to PRODUCTION Server
        env:
          DOT_ENV: ${{ secrets.DOT_ENV_SERVER }}
        run: echo "${{ secrets.DOT_ENV_SERVER }}" > .env
      # - name: Run build script
      #   run: ./.scripts/deploy.sh
      #   shell: bash
      - name: Run build script after Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ${{ secrets.SSH_USERNAME }}
          script: |
            cd /var/www/test/
            sudo ./.scripts/deploy.sh